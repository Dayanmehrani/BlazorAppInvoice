@page "/Invoices/edit"
@inject BlazorAppInvoice.Data.BlazorAppInvoiceContext DB
@using BlazorAppInvoice
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Invoice</h4>
<hr />
@if (Invoice is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Invoice" OnValidSubmit="UpdateInvoice" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Invoice.Id" value="@Invoice.Id" />
                <div class="mb-3">
                    <label for="customername" class="form-label">CustomerName:</label>
                    <InputText id="customername" @bind-Value="Invoice.CustomerName" class="form-control" />
                    <ValidationMessage For="() => Invoice.CustomerName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="number" class="form-label">Number:</label>
                    <InputNumber id="number" @bind-Value="Invoice.Number" class="form-control" />
                    <ValidationMessage For="() => Invoice.Number" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="invoicedate" class="form-label">InvoiceDate:</label>
                    <InputDate id="invoicedate" @bind-Value="Invoice.InvoiceDate" class="form-control" />
                    <ValidationMessage For="() => Invoice.InvoiceDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="invoice_due_date" class="form-label">Invoice_Due_Date:</label>
                    <InputDate id="invoice_due_date" @bind-Value="Invoice.Invoice_Due_Date" class="form-control" />
                    <ValidationMessage For="() => Invoice.Invoice_Due_Date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="currencycode" class="form-label">CurrencyCode:</label>
                    <InputText id="currencycode" @bind-Value="Invoice.CurrencyCode" class="form-control" />
                    <ValidationMessage For="() => Invoice.CurrencyCode" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount:</label>
                    <InputNumber id="amount" @bind-Value="Invoice.Amount" class="form-control" />
                    <ValidationMessage For="() => Invoice.Amount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Invoice.Description" class="form-control" />
                    <ValidationMessage For="() => Invoice.Description" class="text-danger" />
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind-value="Invoice.IsPaid" id="flexCheckChecked" checked>
                    <label class="form-check-label" for="flexCheckChecked">
                        Is Paid @Invoice.IsPaid
                    </label>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/invoices">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Invoice? Invoice { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Invoice ??= await DB.Invoice.FirstOrDefaultAsync(m => m.Id == Id);

        if (Invoice is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateInvoice()
    {
        DB.Attach(Invoice!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!InvoiceExists(Invoice!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/invoices");
    }

    bool InvoiceExists(int id)
    {
        return DB.Invoice.Any(e => e.Id == id);
    }
}
